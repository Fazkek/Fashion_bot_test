import json
from PIL import Image
import rembg
import pymorphy2
import os
from sklearn.cluster import KMeans
import tensorflow as tf
from tensorflow.keras.models import load_model
from colorthief import ColorThief
import keras.utils as imag
import numpy as np
import cv2


class JsonFile:
    def write(data, file_name):
        with open(file_name, 'w', encoding="utf-8") as file:
            json.dump(data, file, indent=4, ensure_ascii=False)

    def read(file_name):
        with open(file_name, 'r', encoding="utf-8") as file:
            return json.load(file)


class Predict:
    def fashion(photo):
        classes = ['—Ñ—É—Ç–±–æ–ª–∫–∞', '–±—Ä—é–∫–∏', '—Å–≤–∏—Ç–µ—Ä', '–ø–ª–∞—Ç—å–µ', '–ø–∞–ª—å—Ç–æ', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '—Ñ—É—Ç–±–æ–ª–∫–∞',
                   '–±–æ—Ç–∏–Ω–∫–∏']

        model = load_model('fashion_mnist_dense.h5')

        image = Image.open(f"{photo.file_id}.jpg")

        # —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é rembg
        image = rembg.remove(image)

        # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        new_image = Image.new("RGB", image.size, (255, 255, 255))

        # –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π png —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –±–µ–ª—ã–π —Ñ–æ–Ω
        new_image.paste(image, (0, 0), image)

        new_image.save(f"1_{photo.file_id}.jpg")

        img = imag.load_img(f"1_{photo.file_id}.jpg", target_size=(28, 28), color_mode='grayscale')

        x = imag.img_to_array(img)
        x = x.reshape(1, 784)
        x = 255 - x
        x /= 255

        prediction = model.predict(x)
        prediction = np.argmax(prediction)

        name = classes[prediction]
        return name


class Color:
    def find(photo):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –º–∞—Å—Å–∏–≤ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º RGB
        color_thief = ColorThief(f"1_{photo.file_id}.jpg")
        # get the dominant color
        dominant_color = color_thief.get_color(quality=1)
        os.remove(f"1_{photo.file_id}.jpg")
        os.remove(f"{photo.file_id}.jpg")

        model = load_model('colormodel_trained_90.h5')
        # –ò–Ω—Ç–µ—Ä–ø—Ä–∏—Ç–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
        color_dict={
            0 : '–ö—Ä–∞—Å–Ω—ã–π',
            1 : '–ó–µ–ª—ë–Ω—ã–π',
            2 : '–°–∏–Ω–∏–π',
            3 : '–ñ—ë–ª—Ç—ã–π',
            4 : '–û—Ä–∞–Ω–∂–µ–≤—ã–π',
            5 : '–†–æ–∑–æ–≤—ã–π',
            6 : '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π',
            7 : '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π',
            8 : '–ë–µ–ª—ã–π',
            9 : '–ß—ë—Ä–Ω—ã–π',
            10 : '–ë–µ–ª—ã–π'
        }


        
        rgb = np.array(dominant_color)
        input_rgb = np.reshape(rgb, (-1,3))
        color_class_confidence = model.predict(input_rgb)
        color_index = np.argmax(color_class_confidence, axis=1)
        color = color_dict[int(color_index)]
        return color

class Recomend:
    def recommend_outfit(data):
        def opposite_color(color):
            color_wheel = {
                '–ö—Ä–∞—Å–Ω—ã–π': '–ó–µ–ª—ë–Ω—ã–π',
                '–ó–µ–ª—ë–Ω—ã–π': '–ö—Ä–∞—Å–Ω—ã–π',            
                '–°–∏–Ω–∏–π': '–û—Ä–∞–Ω–∂–µ–≤—ã–π',
                '–û—Ä–∞–Ω–∂–µ–≤—ã–π': '–°–∏–Ω–∏–π',
                '–ñ—ë–ª—Ç—ã–π': '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π',            
                '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π': '–ñ—ë–ª—Ç—ã–π',            
                '–ë–µ–ª—ã–π': '–ß—ë—Ä–Ω—ã–π',
                '–ß—ë—Ä–Ω—ã–π': '–ë–µ–ª—ã–π',
                '–†–æ–∑–æ–≤—ã–π': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π',
                '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π': '–†–æ–∑–æ–≤—ã–π',
                '–°–µ—Ä—ã–π': '–±–µ–ª—ã–π'
            }
            return color_wheel[color]
        def circle_color(color):
            color_circle = {
                '–ö—Ä–∞—Å–Ω—ã–π': 'üî¥',
                '–ó–µ–ª—ë–Ω—ã–π': 'üü¢',            
                '–°–∏–Ω–∏–π': 'üîµ',
                '–û—Ä–∞–Ω–∂–µ–≤—ã–π': 'üü†',
                '–ñ—ë–ª—Ç—ã–π': 'üü°',            
                '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üü£',            
                '–ë–µ–ª—ã–π': '‚ö™Ô∏è',
                '–ß—ë—Ä–Ω—ã–π': '‚ö´Ô∏è',
                '–†–æ–∑–æ–≤—ã–π': 'üå∏',
                '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'üü§',
                '–°–µ—Ä—ã–π': '‚öôÔ∏è'
            }
            return color_circle[color]
        
        morph = pymorphy2.MorphAnalyzer()
        outfits = []
        for outfit in data.values():
            for i, item1 in enumerate(outfit):
                type1, color1 = list(item1.keys())[0], list(item1.values())[0]
                if type1 in ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '—Å–≤–∏—Ç–µ—Ä', '–ø–ª–∞—Ç—å–µ', '–ø–∞–ª—å—Ç–æ']:
                    for j, item2 in enumerate(outfit[i+1:], start=i+1):
                        type2, color2 = list(item2.keys())[0], list(item2.values())[0]
                        if type1 != type2 and (color1 not in ['–ë–µ–ª—ã–π', '–ß—ë—Ä–Ω—ã–π']) and opposite_color(color1) == color2:
                            if morph.parse(type2)[0].tag.number == 'plur':
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}', f'{morph.parse(type1)[0].tag.gender}'}).word.capitalize()} {morph.parse(type1)[0].inflect({'nomn'}).word} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}'}).word} {type2} {circle_color(color2)}")                            
                            else:
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}', f'{morph.parse(type1)[0].tag.gender}'}).word.capitalize()} {morph.parse(type1)[0].inflect({'nomn'}).word} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}', f'{morph.parse(type2)[0].tag.gender}'}).word} {type2} {circle_color(color2)}")
                        elif (color1 in ['–ë–µ–ª—ã–π', '–ß—ë—Ä–Ω—ã–π']) and type1 != type2:
                            if morph.parse(type2)[0].tag.number == 'plur':
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}', f'{morph.parse(type1)[0].tag.gender}'}).word.capitalize()} {morph.parse(type1)[0].inflect({'nomn'}).word} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}'}).word} {type2} {circle_color(color2)}")                            
                            else:
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}', f'{morph.parse(type1)[0].tag.gender}'}).word.capitalize()} {morph.parse(type1)[0].inflect({'nomn'}).word} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}', f'{morph.parse(type2)[0].tag.gender}'}).word} {type2} {circle_color(color2)}")
                elif type1 in ['–±—Ä—é–∫–∏', '—é–±–∫–∞', '—Å—É–º–∫–∞']:
                    for j, item2 in enumerate(outfit):
                        if j <= i:
                            continue
                        type2, color2 = list(item2.keys())[0], list(item2.values())[0]
                        if type1 != type2 and (color1 not in ['–ë–µ–ª—ã–π', '–ß—ë—Ä–Ω—ã–π']) and opposite_color(color1) == color2:
                            if morph.parse(type1)[0].tag.number == 'plur':
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}'}).word.capitalize()} {type1} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}', f'{morph.parse(type2)[0].tag.gender}'}).word} {type2} {circle_color(color2)}")
                            else:
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}', f'{morph.parse(type1)[0].tag.gender}'}).word.capitalize()} {morph.parse(type1)[0].inflect({'nomn'}).word} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}', f'{morph.parse(type2)[0].tag.gender}'}).word} {type2} {circle_color(color2)}")
                        elif (color1 in ['–ë–µ–ª—ã–π', '–ß—ë—Ä–Ω—ã–π']) and type1 != type2:
                            if morph.parse(type1)[0].tag.number == 'plur':
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}'}).word.capitalize()} {type1} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}', f'{morph.parse(type2)[0].tag.gender}'}).word} {type2} {circle_color(color2)}")
                            else:
                                outfits.append(f"üï∂ –ë—É–¥—É—Ç —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è üï∂\n{circle_color(color1)} {morph.parse(color1)[0].inflect({'nomn', f'{morph.parse(type1)[0].tag.number}', f'{morph.parse(type1)[0].tag.gender}'}).word.capitalize()} {morph.parse(type1)[0].inflect({'nomn'}).word} –∏ {morph.parse(color2)[0].inflect({'nomn', f'{morph.parse(type2)[0].tag.number}', f'{morph.parse(type2)[0].tag.gender}'}).word} {type2} {circle_color(color2)}")

                            

                else:
                   outfits.append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {type1}")
        return outfits